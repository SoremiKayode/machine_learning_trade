# -*- coding: utf-8 -*-
"""forex_idea1_implementation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1501Yn5PWbOYKKrJNY2VwT6BOqlYgeq7U

**Non Machine learning :** 

Use momentum indicator like adx to check if the momentum 
In the market is high.

use bollinger band, exponential moving average and macd to detect a crossover, then enter trade.

Use macd and fix pip to exit the market

Test different optimization parameter of these indicators to know the best one to use

#**Problem**
Create a profitable forex robot on different major currencies, optimize them to achieve true profitability:

#**Inputs** 
* Bollinger Bands
* moving Average
* RSI
* ADX

#**Solutions**

**Enrtry Buy :**
* if adx is above 14
* if candle -1 close price > fast (25) moving average
* if candle -1 close price > fast (50) moving average
* if fast eg (25) moving average is below slow (50) moving average for candle -2 and fast (25) moving average is above slow (50) for candle -1
* if RSI < 70

**Enrtry Sell :**
* if adx is above 14
* if candle -1 close price < fast (25) moving average
* if candle -1 close price < fast (50) moving average
* if fast eg (25) moving average is above slow (50) moving average for candle -2 and fast (25) moving average is below slow (50) for candle -1
* if RSI > 30

**Buy exit :**
* when close high or open price >= upper Bollinger Bands **0R**
* When RSI > 80 **OR**
* Above 30 pips

**Sell exit :**
* when close low or open price <= lower Bolliner Bands **0R**
* When RSI > 30 **OR**
* Above 30 pips

WRITING THE CODE

**STEPS:**

import he needed library, pandas, numpy, talib, backtesting.
create the strategy function that return data for each indicator, adx, bollinger bands, moving average, rsi.
compute the indicator
def the trade functions
backtest it
"""


import pandas as pd
import numpy as np
from backtesting import Strategy
from backtesting.lib import crossover
from talib.abstract import *
import pandas as pd
import numpy as np
import time

from clean_up_data import cleanup_prepare_data
df = pd.read_csv("EURUSD1MINUTE.csv")

df = cleanup_prepare_data(df)

df["sma25"] = df["Close"].rolling(25).mean()
df["sma50"] = df["Close"].rolling(50).mean()
df["adx"] = ADX(df["High"], df["Low"], df["Close"], timeperiod=14)
df["rsi"] = RSI(df["Close"])
df["upper_bollinger"], df["middle_bollinger"], df["lower_bollinger"] = BBANDS(df["Close"], timeperiod=50)

# creating a function to calculate moving average for us 
def moving_avaerage(data, window):
    return pd.Series(data).rolling(window).mean()

def adx_indicator(data_high, data_low, data_close, timeperiod):
  return ADX(data_high, data_low, data_close, timeperiod)

def bbands_upper(data, timeperiod, updeviation, down_deviation):
  upper_bollinger, _, _ = BBANDS(data, timeperiod=timeperiod, nbdevup=updeviation, nbdevdn=down_deviation)
  return upper_bollinger

def bbands_middle(data, timeperiod, updeviation, down_deviation):
  _, middle_bollinger, _ = BBANDS(data, timeperiod=timeperiod, nbdevup=updeviation, nbdevdn=down_deviation)
  return middle_bollinger

def bbands_lower(data, timeperiod, updeviation, down_deviation):
  _, _, lower_bollinger = BBANDS(data, timeperiod=timeperiod, nbdevup=updeviation, nbdevdn=down_deviation)
  return lower_bollinger

def rsi_indicator(data, timeperiod):
  return RSI(data, timeperiod=timeperiod)

class SMACrossOver(Strategy):
  fastsm = 25
  slowsm = 50
  adx_timeperiod = 14
  bb_timeperiod = 25
  bb_updeviation = 2.0
  rsi_timeperiod = 12
  adx_checkperiod = 25
  rsi_up_check_period = 70
  rsi_down_check_period = 30
  stoplossinpips = 40
  takeprofitinpips = 40
  def init(self):
    self.smafast = self.I(moving_avaerage, self.data.Close, self.fastsm)
    self.smaslow = self.I(moving_avaerage, self.data.Close, self.slowsm)
    self.adx = self.I(adx_indicator, self.data.High, self.data.Low, self.data.Close, self.adx_timeperiod)
    self.bollinger_upper = self.I(bbands_upper, self.data.Close, self.bb_timeperiod, self.bb_updeviation, self.bb_updeviation)
    self.bollinger_middle = self.I(bbands_middle, self.data.Close, self.bb_timeperiod, self.bb_updeviation, self.bb_updeviation)
    self.bollinger_lower = self.I(bbands_lower, self.data.Close, self.bb_timeperiod, self.bb_updeviation, self.bb_updeviation)
    self.rsi = self.I(rsi_indicator, self.data.Close, self.rsi_timeperiod)

  def next(self):
    if (self.adx[-1] >= self.adx_checkperiod and self.data.Close[-1] > self.smafast[-1] and self.smafast[-2] < self.smaslow[-2] and self.smafast[-1] > self.smaslow[-1] and self.rsi < self.rsi_up_check_period):
      self.buy(size=0.2, sl=self.data.Close[-1] - (self.stoplossinpips * 0.00011), tp=self.data.Close[-1] + (self.takeprofitinpips * 0.00011))

    elif (self.adx[-1] >= self.adx_checkperiod and self.data.Close[-1] < self.smafast[-1] and self.smafast[-2] > self.smaslow[-2] and self.smafast[-1] < self.smaslow[-1] and self.rsi > self.rsi_down_check_period):
      self.sell(size=0.2, sl=self.data.Close[-1] + (self.stoplossinpips * 0.00011), tp=self.data.Close[-1] - (self.takeprofitinpips * 0.00011))

    elif(self.data.Close[-1] >= self.bollinger_upper[-1]):
      if self.position.is_long :
        self.position.close()

    elif(self.data.Close[-1] <= self.bollinger_lower[-1]):
      if self.position.is_short :
        self.position.close()

from backtesting import Backtest

bt = Backtest(data=df, strategy=SMACrossOver, cash=100, commission=0.0, margin=0.02)
stats = bt.run()
print(stats)

optimize = bt.optimize(fastsm = [5, 10, 15, 20, 25, 30, 35, 40],
  slowsm = [40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100],
  adx_timeperiod = [14, 15, 16, 17, 18, 19, 20],
  bb_timeperiod = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70],
  bb_updeviation = [2.0, 3.0],
  adx_checkperiod = [15, 20, 25, 30, 35],
  stoplossinpips = [10, 20, 30, 40, 50, 60, 70, 80],
  takeprofitinpips = [10, 20, 30, 40, 50, 60, 70, 80],
)

data = pd.DataFrame(optimize)
data.to_csv("EURUSDOPTIMIZE_DATA.csv")